# -*- coding: utf-8 -*-
"""Numpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1edOLaHxOKI5wnyuMC_QMf37DX8VYUMeX
"""

import numpy as np

# array creation

array = np.array([1, 3, 5, 4, 6, 7])
array

# array creation using range

array = np.array(range(10))
array

# array creation using arange

array = np.arange(10)
array

# array creation using ones and zeros

araay = np.zeros(5, dtype = 'int64')
araay
array = np.ones([5,2])
array

# array creation using full

array = np.full(12, 6)
array

# array creation using linspace

array = np.linspace(0, 10, 4, dtype = 'int64')
array

# array creation using random

array1 = np.random.random([2, 3])
array2 = np.random.randint(0, 4, [2,3])
array1 , array2

# array creation using eye (identity matrix)

array = np.eye(3,3 , dtype= 'int32')
array

# array creation using empty

array = np.empty([2,2], dtype = 'int64')
array

# Indexing :)

array = np.arange(20)

# simple indexing :)

array[12]

# changing value at index :)

array[2] = 44
array

# Indexing of two dimensional array

array = np.arange(10, 20)
array2 =  array.reshape(2,5)

array2[1, 4]

# Slicing

array = np.array([23, 12, 434, 5, 32, 56, 7, 4])
array[:3]
array[3:]
array[::3]

# 2-D slicing

array = np.arange(9, 19)
array2 = array.reshape(2,5)
array2[:2 , :3]

# copying

array = np.arange(2,5)
copy =  array.copy()
copy

# concatenate

array1 = np.array([1, 2, 3])
array2 = np.array([6, 7, 8, 9, 10])

array3  = np.concatenate([array1 , array2])
array3

# Vertical Concatenation :)

x = np.array([[1, 2, 3], [4, 5, 6]])
y = np.array([7, 8, 9])
array4 = np.vstack([x,y])

array4

# Horizontal Concatenation :)

x = np.array([[1, 2, 3], [4, 5, 6]])
y = np.array([[7, 8, 9], [10, 11, 12]])
array5 = np.hstack([x,y])
array5

# Reshape

array6 = array5.reshape([ 3, 2, 2])
array6

# Transpose

array5.T

# Arithmetic or BroadCasting

numbers = np.arange(10)

# add or Sum
array = numbers + 3
array

array1 = np.add(numbers, 5 , out = array)
array1

# reduce

sum = np.add.reduce(array1)
sum

# division , subtraction, power, mod, floor_division , mutiply

x  = np.array([2, 4, 6, 7])
y = np.array([3, 5, 9, 10])

# divide
div = np.divide(x,y)
div

# multiply
mul = np.multiply(x,y)
mul

# power
power = np.power(x,2)
power

# mod
mod = np.mod(y, x)
mod

# subtract
sub = np.subtract(y,x)
sub

# floor Division
floor_div = np.floor_divide(y,x)
floor_div

# all and any

arr =  np.array([True, False, True, True])
np.all(arr)

np.any(arr)

# nansum and nanstd

arr1 = np.array([1, 2, np.nan, 4, 5])
result = np.nansum(arr1)
result

result2 = np.nanstd(arr1)
result2

# max, min, mean, median

array1 = np.array([12, 10, 23, 34, 56])
array1

# max
max = np.max(array1)
max

# min
min = np.min(array1)
min

# mean
mean = np.mean(array1)
mean

# median
median = np.median(array1)
median

# ndim , shape, size

array = np.array = ([[[ 1,  2],  [ 3,  7]],
                    [[ 8,  9], [ 4,  5]],
                     [[ 6, 10], [11, 12]]])
# shape
shape = np.shape(array)
shape

# ndim
dim = np.ndim(array)
dim

# size
size = np.size(array)
size